// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A命令の場合
    // i = instruction[15]
    // value = instruction[0..14]
    // C命令の場合
    // i = instruction[15]
    // a = instruction[12]
    // c = instruction[6..11]
    // d = instruction[3..5] d(A)=instruction[5], d(D)=insturction[4], d(M)=instruction[3]
    // j = instruction[0..2]

    // decoder
    // for readable
    Or16(a=instruction,
         b=false,
         out[15]=i,
         out[12]=a,
         out[11]=c1,
         out[10]=c2,
         out[9]=c3,
         out[8]=c4,
         out[7]=c5,
         out[6]=c6,
         out[5]=d1,
         out[4]=d2,
         out[3]=d3,
         out[2]=j1,
         out[1]=j2,
         out[0]=j3,
         out=value);
    // loadA:
    // if (i == 0) || (i == 1 && d1 == 1) then 1 else 0
    // if not i || (i && d1) then 1 else 0
    Not(in=i, out=ni);
    And(a=i, b=d1, out=iAndD1);
    Or(a=ni, b=iAndD1, out=loadA);
    // useInM:
    // if i == 1 && a == 1 then 1 else 0
    // if i && a then 1 then 0
    And(a=i, b=a, out=useInM);
    // loadD:
    // if i == 1 && d2 == 1 then 1 else 0
    // if i && d2 then 1 else 0
    And(a=i, b=d2, out=loadD);
    // writeM
    // if i == 1 && d3 == 1 then 1 else 0
    // if i && d3 then 1 else 0
    And(a=i, b=d3, out=writeM);
    // loadPC
    // if i == 1 && ((j1 == 1 && outALU < 0) || (j2 == 1 && outALU == 0) || (j3 == 1 && outALU > 0)) then 1 else 0
    // if i && ((j1 && ng && not zr) || (j2 && zr) || (j3 && not ng && not zr)) then 1 else 0
    Not(in=zr, out=nzr);
    Not(in=ng, out=nng);
    And(a=ng, b=nzr, out=nzrng);
    And(a=nng, b=nzr, out=nzrnng);
    And(a=j1, b=nzrng, out=isJ1);
    And(a=j2, b=zr, out=isJ2);
    And(a=j3, b=nzrnng, out=isJ3);
    Or(a=isJ1, b=isJ2, out=isJ1OrJ2);
    Or(a=isJ1OrJ2, b=isJ3, out=j);
    And(a=i, b=j, out=loadPC);

    Mux16(a=value, b=outALU, sel=i, out=inA);
    ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);
    Mux16(a=outA, b=inM, sel=useInM, out=inALU);
    ALU(x=outD, y=inALU,
        zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6,
        out=outALU, zr=zr, ng=ng, out=outM);
    DRegister(in=outALU, load=loadD, out=outD);
    PC(in=outA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}
